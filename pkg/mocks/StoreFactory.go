// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/ebanfa/skeleton/pkg/types"
)

// StoreFactory is an autogenerated mock type for the StoreFactory type
type StoreFactory struct {
	mock.Mock
}

// CreateStore provides a mock function with given fields: name
func (_m *StoreFactory) CreateStore(name string) (types.Store, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CreateStore")
	}

	var r0 types.Store
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.Store, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) types.Store); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Store)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStoreFactory creates a new instance of StoreFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoreFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *StoreFactory {
	mock := &StoreFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
