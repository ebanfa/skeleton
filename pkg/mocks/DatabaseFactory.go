// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	store "github.com/ebanfa/skeleton/pkg/store"
	mock "github.com/stretchr/testify/mock"
)

// DatabaseFactory is an autogenerated mock type for the DatabaseFactory type
type DatabaseFactory struct {
	mock.Mock
}

// CreateDatabase provides a mock function with given fields: name, path
func (_m *DatabaseFactory) CreateDatabase(name string, path string) (store.Database, error) {
	ret := _m.Called(name, path)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabase")
	}

	var r0 store.Database
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (store.Database, error)); ok {
		return rf(name, path)
	}
	if rf, ok := ret.Get(0).(func(string, string) store.Database); ok {
		r0 = rf(name, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Database)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabaseFactory creates a new instance of DatabaseFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseFactory {
	mock := &DatabaseFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
