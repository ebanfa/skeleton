// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ebanfa/skeleton/pkg/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ebanfa/skeleton/pkg/types"
)

// PluginInterface is an autogenerated mock type for the PluginInterface type
type PluginInterface struct {
	mock.Mock
}

// Description provides a mock function with given fields:
func (_m *PluginInterface) Description() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Description")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *PluginInterface) ID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Initialize provides a mock function with given fields: ctx, system
func (_m *PluginInterface) Initialize(ctx *common.Context, system types.SystemInterface) error {
	ret := _m.Called(ctx, system)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context, types.SystemInterface) error); ok {
		r0 = rf(ctx, system)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *PluginInterface) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RegisterResources provides a mock function with given fields: ctx
func (_m *PluginInterface) RegisterResources(ctx *common.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RegisterResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *PluginInterface) Start(ctx *common.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *PluginInterface) Stop(ctx *common.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *PluginInterface) Type() types.ComponentType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 types.ComponentType
	if rf, ok := ret.Get(0).(func() types.ComponentType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ComponentType)
	}

	return r0
}

// NewPluginInterface creates a new instance of PluginInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPluginInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PluginInterface {
	mock := &PluginInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
