// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// VersionedDatabase is an autogenerated mock type for the VersionedDatabase type
type VersionedDatabase struct {
	mock.Mock
}

// Load provides a mock function with given fields:
func (_m *VersionedDatabase) Load() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadVersion provides a mock function with given fields: targetVersion
func (_m *VersionedDatabase) LoadVersion(targetVersion int64) (int64, error) {
	ret := _m.Called(targetVersion)

	if len(ret) == 0 {
		panic("no return value specified for LoadVersion")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (int64, error)); ok {
		return rf(targetVersion)
	}
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(targetVersion)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(targetVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields:
func (_m *VersionedDatabase) Rollback() {
	_m.Called()
}

// SaveVersion provides a mock function with given fields:
func (_m *VersionedDatabase) SaveVersion() ([]byte, int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SaveVersion")
	}

	var r0 []byte
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]byte, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewVersionedDatabase creates a new instance of VersionedDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVersionedDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *VersionedDatabase {
	mock := &VersionedDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
