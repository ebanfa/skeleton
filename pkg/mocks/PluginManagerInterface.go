// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ebanfa/skeleton/pkg/common"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ebanfa/skeleton/pkg/types"
)

// PluginManagerInterface is an autogenerated mock type for the PluginManagerInterface type
type PluginManagerInterface struct {
	mock.Mock
}

// AddPlugin provides a mock function with given fields: ctx, plugin
func (_m *PluginManagerInterface) AddPlugin(ctx *common.Context, plugin types.PluginInterface) error {
	ret := _m.Called(ctx, plugin)

	if len(ret) == 0 {
		panic("no return value specified for AddPlugin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context, types.PluginInterface) error); ok {
		r0 = rf(ctx, plugin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DiscoverPlugins provides a mock function with given fields: ctx
func (_m *PluginManagerInterface) DiscoverPlugins(ctx *common.Context) ([]types.PluginInterface, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DiscoverPlugins")
	}

	var r0 []types.PluginInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(*common.Context) ([]types.PluginInterface, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*common.Context) []types.PluginInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PluginInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(*common.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlugin provides a mock function with given fields: name
func (_m *PluginManagerInterface) GetPlugin(name string) (types.PluginInterface, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetPlugin")
	}

	var r0 types.PluginInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.PluginInterface, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) types.PluginInterface); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.PluginInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields: ctx, system
func (_m *PluginManagerInterface) Initialize(ctx *common.Context, system types.SystemInterface) error {
	ret := _m.Called(ctx, system)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context, types.SystemInterface) error); ok {
		r0 = rf(ctx, system)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadRemotePlugin provides a mock function with given fields: ctx, pluginURL
func (_m *PluginManagerInterface) LoadRemotePlugin(ctx *common.Context, pluginURL string) (types.PluginInterface, error) {
	ret := _m.Called(ctx, pluginURL)

	if len(ret) == 0 {
		panic("no return value specified for LoadRemotePlugin")
	}

	var r0 types.PluginInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(*common.Context, string) (types.PluginInterface, error)); ok {
		return rf(ctx, pluginURL)
	}
	if rf, ok := ret.Get(0).(func(*common.Context, string) types.PluginInterface); ok {
		r0 = rf(ctx, pluginURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.PluginInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(*common.Context, string) error); ok {
		r1 = rf(ctx, pluginURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePlugin provides a mock function with given fields: plugin
func (_m *PluginManagerInterface) RemovePlugin(plugin types.PluginInterface) error {
	ret := _m.Called(plugin)

	if len(ret) == 0 {
		panic("no return value specified for RemovePlugin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.PluginInterface) error); ok {
		r0 = rf(plugin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartPlugins provides a mock function with given fields: ctx
func (_m *PluginManagerInterface) StartPlugins(ctx *common.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartPlugins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopPlugins provides a mock function with given fields: ctx
func (_m *PluginManagerInterface) StopPlugins(ctx *common.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StopPlugins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPluginManagerInterface creates a new instance of PluginManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPluginManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PluginManagerInterface {
	mock := &PluginManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
