// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ebanfa/skeleton/pkg/common"
	mock "github.com/stretchr/testify/mock"
)

// BusSubscriber is an autogenerated mock type for the BusSubscriber type
type BusSubscriber struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields: params
func (_m *BusSubscriber) Subscribe(params common.BusSubscriptionParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.BusSubscriptionParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeAsync provides a mock function with given fields: params, transactional
func (_m *BusSubscriber) SubscribeAsync(params common.BusSubscriptionParams, transactional bool) error {
	ret := _m.Called(params, transactional)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.BusSubscriptionParams, bool) error); ok {
		r0 = rf(params, transactional)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeOnce provides a mock function with given fields: params
func (_m *BusSubscriber) SubscribeOnce(params common.BusSubscriptionParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeOnce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.BusSubscriptionParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeOnceAsync provides a mock function with given fields: params
func (_m *BusSubscriber) SubscribeOnceAsync(params common.BusSubscriptionParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeOnceAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.BusSubscriptionParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: params
func (_m *BusSubscriber) Unsubscribe(params common.BusSubscriptionParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(common.BusSubscriptionParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBusSubscriber creates a new instance of BusSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBusSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *BusSubscriber {
	mock := &BusSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
