// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ebanfa/skeleton/pkg/common"
	mock "github.com/stretchr/testify/mock"

	system "github.com/ebanfa/skeleton/pkg/system"
)

// ComponentRegistrarInterface is an autogenerated mock type for the ComponentRegistrarInterface type
type ComponentRegistrarInterface struct {
	mock.Mock
}

// CreateComponent provides a mock function with given fields: ctx, config
func (_m *ComponentRegistrarInterface) CreateComponent(ctx *common.Context, config *system.ComponentConfig) (system.ComponentInterface, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponent")
	}

	var r0 system.ComponentInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(*common.Context, *system.ComponentConfig) (system.ComponentInterface, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(*common.Context, *system.ComponentConfig) system.ComponentInterface); ok {
		r0 = rf(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(system.ComponentInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(*common.Context, *system.ComponentConfig) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllComponents provides a mock function with given fields:
func (_m *ComponentRegistrarInterface) GetAllComponents() []system.ComponentInterface {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllComponents")
	}

	var r0 []system.ComponentInterface
	if rf, ok := ret.Get(0).(func() []system.ComponentInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]system.ComponentInterface)
		}
	}

	return r0
}

// GetComponent provides a mock function with given fields: id
func (_m *ComponentRegistrarInterface) GetComponent(id string) (system.ComponentInterface, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetComponent")
	}

	var r0 system.ComponentInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (system.ComponentInterface, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) system.ComponentInterface); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(system.ComponentInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComponentsByType provides a mock function with given fields: componentType
func (_m *ComponentRegistrarInterface) GetComponentsByType(componentType system.ComponentType) []system.ComponentInterface {
	ret := _m.Called(componentType)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentsByType")
	}

	var r0 []system.ComponentInterface
	if rf, ok := ret.Get(0).(func(system.ComponentType) []system.ComponentInterface); ok {
		r0 = rf(componentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]system.ComponentInterface)
		}
	}

	return r0
}

// GetFactory provides a mock function with given fields: id
func (_m *ComponentRegistrarInterface) GetFactory(id string) (system.ComponentFactoryInterface, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetFactory")
	}

	var r0 system.ComponentFactoryInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (system.ComponentFactoryInterface, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) system.ComponentFactoryInterface); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(system.ComponentFactoryInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterFactory provides a mock function with given fields: ctx, id, factory
func (_m *ComponentRegistrarInterface) RegisterFactory(ctx *common.Context, id string, factory system.ComponentFactoryInterface) error {
	ret := _m.Called(ctx, id, factory)

	if len(ret) == 0 {
		panic("no return value specified for RegisterFactory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context, string, system.ComponentFactoryInterface) error); ok {
		r0 = rf(ctx, id, factory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveComponent provides a mock function with given fields: ctx, id
func (_m *ComponentRegistrarInterface) RemoveComponent(ctx *common.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveComponent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnregisterFactory provides a mock function with given fields: ctx, id
func (_m *ComponentRegistrarInterface) UnregisterFactory(ctx *common.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterFactory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewComponentRegistrarInterface creates a new instance of ComponentRegistrarInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentRegistrarInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentRegistrarInterface {
	mock := &ComponentRegistrarInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
