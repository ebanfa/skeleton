// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	system "github.com/ebanfa/skeleton/pkg/system"
	mock "github.com/stretchr/testify/mock"
)

// ComponentFactoryInterface is an autogenerated mock type for the ComponentFactoryInterface type
type ComponentFactoryInterface struct {
	mock.Mock
}

// CreateComponent provides a mock function with given fields: config
func (_m *ComponentFactoryInterface) CreateComponent(config *system.ComponentConfig) (system.ComponentInterface, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponent")
	}

	var r0 system.ComponentInterface
	var r1 error
	if rf, ok := ret.Get(0).(func(*system.ComponentConfig) (system.ComponentInterface, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*system.ComponentConfig) system.ComponentInterface); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(system.ComponentInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(*system.ComponentConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewComponentFactoryInterface creates a new instance of ComponentFactoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComponentFactoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComponentFactoryInterface {
	mock := &ComponentFactoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
